#
# configuration used for development purposes on all development plattforms
# (currently Mac OS X, OpenSuSE, Ubuntu)
#
#Â (c) 2014 Prof Dr Andreas Muelle, Hochschule Rapperswil
#

# set default compiler flags
# the -fuse-cxa-atexit seems to be necessary for dynamically loaded 
# C++ modules, but I'm not convinced. The tests still crash when
# unloading the modules
CFLAGS="-Wall -Wextra -g -O2"
CXXFLAGS="-fuse-cxa-atexit ${CFLAGS}"
export CFLAGS CXXFLAGS

# always enable the othello driver
commonflags="--enable-othello"

# we always build the microtouch driver, as it is very small and we need
# the USB library it depends on anyway
commonflags="${commonflags} --enable-microtouch"

# enable building the SX driver, SX is our main test hardware, so we always
# build that on the test systems
commonflags="${commonflags} --enable-sx"

# check whether the libqhyccd library is installed, and build the qhy
# driver if it is
if [ -f /usr/local/include/qhylib.h ]
then
	commonflags="${commonflags} --enable-qhy"
fi

# find out whether we have the QSI library installed, and trigger building
# the QSI driver
if [ -r /usr/local/include/qsiapi.h ]
then
	commonflags="${commonflags} --enable-qsi"
fi

# find out whether the ASI library is installed, and trigger build the
# ASI driver
if [ -r /usr/local/include/ASICamera2.h ]
then
	commonflags="${commonflags} --enable-asi"
fi

# find out whether the ATIK driver library is install, and trigger build
# the ATIK driver
if [ -r /usr/local/include/atikccdusb.h -o -r /usr/include/atikccdusb.h ]
then
	commonflags="${commonflags} --enable-atik"
fi

# the next few sections are about whether or not to build the ICE components
# add ICE PATH for Mac OS X
if [ -d /usr/local/Ice ]
then
	ICEDIR=/usr/local/Ice
	SLICEDIR=/usr/local/Ice/share/ice/slice
elif [ -x /usr/bin/slice2cpp ]
then
	ICEDIR=/usr
	SLICEDIR="${ICEDIR}/share/ice/slice"
fi
if [ -n "${ICEDIR}" ]
then
	iceversion=`${ICEDIR}/bin/slice2cpp --version 2>&1`
	if [ -d "${ICEDIR}/share/Ice-${iceversion}/slice" ]
	then
		SLICEDIR="${ICEDIR}/share/Ice-${iceversion}/slice"
	elif [ -d "${ICEDIR}/share/Ice/slice" ]
	then
		SLICEDIR="${ICEDIR}/share/Ice/slice"
	fi
fi

if [ -n "${SLICEDIR}" ]
then
	commonflags="${commonflags} --with-slice=${SLICEDIR}"
fi

# if the ICE directory is set, then some other paths may also need to be set
if [ -n "${ICEDIR}" ]
then
	PATH=${ICEDIR}/bin:${PATH}
	# c++11 specific directories
	if [ -d ${ICEDIR}/bin/c++11 ]
	then
		PATH="${ICEDIR}/bin/c++11:${PATH}"
	else
		PATH="${ICEDIR}/bin:${PATH}"
	fi
	commonflags="${commonflags} --with-ice=${ICEDIR}"
	# architecture specific ICE libdirs (used on Debian)
	ICELIBDIR="${ICEDIR}/lib"
	for architecture in arm-linux-gnueabihf x86_64-linux-gnu
	do
		if [ -d ${ICEDIR}/lib/${architecture} ]
		then
			ICELIBDIR="${ICEDIR}/lib/${architecture}"
		fi
	done
fi

# make sure the Ice libdir option is set
if [ -n "${ICELIBDIR}" ]
then
	commonflags="${commonflags} --with-icelibdir=${ICELIBDIR}"
fi

# make sure pdflatex is found even on Mac OS X where pdflatex is not on
# the standard path
if [ -d /usr/local/texlive/2013 ]
then
	PATH=${PATH}:/usr/local/texlive/2013/bin/x86_64-darwin
	export PATH
fi

# first find out what type of system we are
systemtype=`uname`
case ${systemtype} in
Darwin)	echo "configuring for Mac OS X"
	CFLAGS="${CFLAGS} -I/usr/local/include"
	if [ -d /Library/Frameworks/SBIGUDrv.framework ]
	then
		echo "configureing with SBIG driver"
		sbigoption=--enable-sbig
	fi
	commonflags="${commonflags} --enable-unittests"
	;;
Linux)	if [ -r /etc/debian_version ]
	then
		echo "configuring for Debian"
		systemtype=Debian
		if [ -n "${SLICEDIR}" -a -d /usr/share/Ice/slice ]
		then
			commonflags="${commonflags} --with-slice=/usr/share/Ice/slice"
		fi
	else
		if [ -r /etc/SuSE-release ]
		then
			echo "configuring for SuSE"
			systemtype=SuSE
			commonflags="${commonflags} --enable-unittests"
		else
			echo "configuring for unspecified Linux (cross your fingers)"
		fi
	fi
	# find out whether we should try to build the sbig driver
	if [ \( -r /usr/local/lib64/libsbigudrv.so -o \
		-r /usr/local/lib/libsbigudrv.so \) -a \
		-r /usr/local/include/sbigudrv.h ]
	then
		echo "attempt building SBIG driver"
		sbigoption=--enable-sbig
	else
		echo "SBIG libraries not present"
		sbigoption=
	fi
	;;
esac

set -x

# now that we have all the information, run the configure script
if [ -d /usr/local/astro ]
then
	prefix=/usr/local/astro
else
	prefix=`pwd`/root
fi
case ${systemtype} in
Linux)
	CXXFLAGS="${CFLAGS} --std=c++11"
	export CXXFLAGS
	./configure --prefix=${prefix} ${commonflags} ${sbigoption} --enable-unittests
	;;
Debian)
	CXXFLAGS="${CXXFLAGS} --std=c++11"
	LDFLAGS="${LDFLAGS} -Wl,-rpath -Wl,/usr/local/lib"
	export CXXFLAGS LDFLAGS
	./configure --prefix=${prefix} ${commonflags} \
		${sbigoption} ${sliceoption} ${icelibdiroption}
	;;
SuSE)
	LDFLAGS="-L/usr/local/lib64 -lusb-1.0 -lefence"
	if [ -d /usr/include/unicap ]
	then
		CFLAGS="${CFLAGS} -I/usr/include/unicap"
		CXXFLAGS="${CXXFLAGS} -I/usr/include/unicap"
	else if [ -d /usr/local/include/unicap ]
		then
			CFLAGS="${CFLAGS} -I/usr/local/include/unicap"
			CXXFLAGS="${CXXFLAGS} -I/usr/local/include/unicap"
		fi
	fi
	CXXFLAGS="${CFLAGS} --std=c++11"
	export LDFLAGS CFLAGS CXXFLAGS

	./configure --prefix=${prefix} ${commonflags} --enable-unicap \
		${sbigoption}
	;;
Darwin)
	LDFLAGS="-L/usr/local/lib -lusb-1.0"
	CXXFLAGS="${CFLAGS} --std=c++11"
	export CFLAGS CXXFLAGS LDFLAGS
	CXXFLAGS="${CXXFLAGS} -stdlib=libc++"
	./configure --prefix=${prefix} ${commonflags} --enable-unittests \
		--enable-uvc ${sbigoption}
	;;
esac


