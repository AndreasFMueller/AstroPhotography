//
// guider.idl -- Interface to an autonomous guider
//
// (c) 2013 Prof Dr Andreas Mueller, Hochschule Rapperswil 2013
//
#include "camera.idl"

module Astro {
	/**
	 * \brief guiders are described by camera, ccdid and guider port
	 *
	 */
	struct GuiderDescriptor {
		string	cameraname;
		long	ccdid;
		string	guiderportname;
	};
	/**
	 * \brief Interface for guiders
	 *
	 * Guiders take information from images shot through a ccd of a
	 * attached camera, and derive corrective actions that they then
	 * output to the guiderport.
	 */
	interface Guider {
		/**
		 * \brief States of the guider
		 */
		enum GuiderState {
			// Without the camera, ccd and guiderport selected,
			// the guider is not configured
			GUIDER_UNCONFIGURED,
			// When the camera, ccd and guider port have been
			// configured, the 
			GUIDER_IDLE,
			// Before the guider can be used for guiding, it must
			// be calibrated
			GUIDER_CALIBRATING,
			// When the guider ist calibrated, it can be used
			// for guiding
			GUIDER_CALIBRATED,
			// The calibrated guider can be used for guiding
			GUIDER_GUIDING
		};
		GuiderState	getState();

		/**
		 * \brief Choose a camera to for the guider
		 */
		Camera	getCamera() raises(BadState);
		Ccd	getCcd() raises(BadState);
		
		/**
		 * \brief Choose a guider port for the guider
		 *
		 * If a string of length 0 is given as the name, then
		 * it is assumed that the guider port of the chosen
		 * camera should be used
		 */
		GuiderPort	getGuiderPort() raises(BadState);

		/**
		 * \brief return the descriptor that created the guider
		 */
		GuiderDescriptor	getDescriptor();

		// The guider needs to know how to expose an image, where
		// to look for the guide star and where to lock it.
		void	setupGuider(in Exposure expo, in Point star)
			raises(BadParameter,BadState);
		Exposure	getExposure();
		Point	selectedPoint() raises(BadState);

		/**
		 * \brief Methods related to calibration
		 */
		struct Calibration {
			float	coefficients[6];
		};
		Calibration	getCalibration() raises(BadState);
		void	useCalibration(in Calibration cal);
		void	startCalibration(in float sensitivity);

		// Start and stop the guding process.
		// Before this can be done, the exposure parameters must be
		// specified, as the determine which are of the CCD to read
		// out and where to look for the star and where to lock it
		void	startGuiding(in float guidinginterval) raises(BadState);
		float	getGuidingInterval() raises(BadState);
		void	stopGuiding() raises(BadState);

		// The following methods are used to monitor the calibration
		// or the guiding. The guider keeps the most recent image
		// so that a GUI application can fetch thosei mages and 
		// display them to the user
		/**
		 * \brief 
		 */
		ShortImage	mostRecentImage() raises(BadState);
		Point	mostRecentOffset() raises(BadState);
		float	mostRecentDelay() raises(BadState);
		struct GuiderAction {
			float	ra;
			float	dec;
		};
		GuiderAction	mostRecentAction() raises(BadState);
	};

	/**
	 * \brief The GuiderFactory builds Guider objects
	 *
	 * Guiders are persistent in the server, because the may have to be
	 * doing their work even when no client is connected. The GuiderFactory
	 * keeps a repository of guider objects. New guider objects can
	 * be created by specifying camera, ccd and guider port.
	 */
	interface GuiderFactory {
		typedef sequence<GuiderDescriptor> GuiderList;
		GuiderList	list();
		Guider	get(in GuiderDescriptor descriptor) raises(NotFound);
	};
};
