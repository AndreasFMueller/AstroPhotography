
module Astro {

	struct ImagePoint {
		long	x;
		long	y;
	};

	struct ImageSize {
		long	width;
		long	height;
	};

	struct ImageRectangle {
		ImagePoint	origin;
		ImageSize	size;
	};

	struct BinningMode {
		long	x;
		long	y;
	};

	typedef sequence<BinningMode>	BinningSet;

	struct CcdInfo {
		string	name;
		long	id;
		ImageSize	size;
		BinningSet	binningmodes;
		boolean	shutter;
	};

	struct Exposure {
		ImageRectangle	frame;
		float	exposuretime;
		float	gain;
		float	limit;
/*
		enum Shutter { CLOSED, OPEN };
		Shutter	shutter_state;
		enum State { idle, exposing, exposed, cancelling };
		BinningMode	mode;
*/
	};

	interface GuiderPort {
		void	activate(in float ra, in float dec);
	};

	interface FilterWheel {
		long	nFilters();
		long	currentPosition();
		void	select(in long position);
	};

	interface Cooler {
		float	getSetTemperature();
		float	getActualTemperature();
		void	setTemperature(in float temperature);
		boolean	isOn();
		void	setOn(in boolean onoff);
	};

	enum ShutterState { SHUTTER_CLOSED, SHUTTER_OPEN };

	interface Ccd {
		boolean	hasGain();

		boolean	hasShutter();
		ShutterState	getShutterState();
		void	setShutterState(in ShutterState state);

		boolean	hasCooler();
		Cooler	getCooler();
	};

	interface Camera {
		string	getName();
		//CcdInfo info;
		long	nCcds();
		CcdInfo	getCcdinfo(in long ccdid);
		Ccd	getCcd(in long ccdid);
		// FilterWheel
		boolean	hasFilterWheel();
		FilterWheel	getFilterWheel();
		// Guider Port
		boolean	hasGuiderPort();
		GuiderPort	getGuiderPort();
	};

	interface DeviceLocator {
		string	getName();
		string	getVersion();
		typedef sequence<string>	DeviceNameList;
		enum device_type { DEVICE_CAMERA, DEVICE_FOCUSER,
					DEVICE_GUIDERPORT };
		DeviceNameList	getDevicelist(in device_type devicetype);
		Camera	getCamera(in string name);
		GuiderPort	getGuiderPort(in string name);
	};

	struct Descriptor {
		string name;
		string version;
		boolean hasDeviceLocator;
	};

	interface DriverModule {
		Descriptor	getDescriptor();
		string	getName();
		DeviceLocator	getDeviceLocator();
	};

	interface Modules {
		long	numberOfModules();
		typedef sequence<string> ModuleNameSequence;
		ModuleNameSequence	getModuleNames();
		DriverModule	getModule(in string name);
	};

};

