//
// tasks.idl -- IDL for the task interface
//
// (c) 2013 Prof Dr Andreas Mueller, Hochschule Rapperswil
//
#include "camera.idl"

module Astro {
	/**
	 * \brief Task Parameters
	 */
	struct TaskParameters {
		// camera
		string	camera;
		long	ccdid;

		// cooler stuff
		float	ccdtemperature;

		// filterwheel parameters
		string	filterwheel;
		long	filterposition;

		// exposure stuff
		Exposure	exp;
	};

	/**
	 * \brief States a task can be in
	 *
	 * When a task is created, it is in the pending state. As soon as
	 * all devices are free, e.g. are not used by any other device,
	 * then it can be started, after which point it is in the executing
	 * state. If anything happens during execution of the task goes into
	 * the failed state. A task can also be cancelled, after which it
	 * is in the cancelled state.
	 */
	enum TaskState	{ TASK_PENDING, TASK_EXECUTING, TASK_FAILED,
			TASK_CANCELLED, TASK_COMPLETED };

	/**
 	 * \brief Task object
	 *
	 * Tasks can manipulated using this interface.
	 */
	interface Task {
		TaskState	state();
		TaskParameters	parameters();
		string		imagename();
		Image		getImage();
	};

	/**
	 * \brief Task queue
	 *
	 * The task queue stores exposure tasks and executes them.
	 */
	interface TaskQueue {
		/**
		 * \brief manipulate the task queue 
		 */
		enum QueueState { IDLE, LAUNCHING, STOPPING, STOPPED };
		QueueState	state();

		/**
		 * \brief submit a new task
		 *
		 * This submits a new task to the queue.
		 */
		long	submit(in TaskParameters params) raises(BadParameter);

		/**
		 * \brief Retreive the parameters of the queue task
	 	 */
		TaskParameters	parameters(in long taskid) raises(NotFound);

		/**
		 * \brief Cancel a task
		 */
		void	cancel(in long taskid) raises(BadState, NotFound);

		/**
		 * \brief Remove a task from the queue
		 */
		void	remove(in long taskid) raises(BadState, NotFound);

		/**
		 *Â \brief retrieve a list of tasks
		 */
		typedef sequence<long> taskidsequence;
		taskidsequence	tasklist(in TaskState state);
		
		/**
		 * \brief retrieve a task reference
		 */
		Task	getTask(in long taskid) raises(NotFound);
	};
};
